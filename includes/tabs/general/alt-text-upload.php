<?php
/**
 * Conditional “Auto Alt-Text” support for SMiLE Basic Web.
 *
 * When enabled, copies the IPTC/XMP “Alt Text Accessibility” tag (or Title)
 * to the attachment’s Alternative-Text field on upload.
 *
 * @package smile-basic-web
 */

defined( 'ABSPATH' ) || exit;

/*
* ------------------------------------------------------------------
* Main class
* ------------------------------------------------------------------
*/
/**
 * Adds all hooks required for automatic alt-text.
 */
final class SBWSCF_Auto_Alt_Text {

	/**
	 * Register filters.
	 *
	 * @return void
	 */
	public static function init(): void {
		add_filter( 'wp_generate_attachment_metadata', array( __CLASS__, 'set_alt_text' ), 10, 2 );
	}

	/*
	* ------------------------------------------------------------------
	* Core callback
	* ------------------------------------------------------------------
	*/

	/**
	 * Populate `_wp_attachment_image_alt` from XMP AltTextAccessibility.
	 *
	 * @param array $metadata      Metadata generated by WP.
	 * @param int   $attachment_id Attachment ID.
	 * @return array Unchanged $metadata.
	 */
	public static function set_alt_text( array $metadata, int $attachment_id ): array {

		// Yoda: only run on images.
		if ( true !== wp_attachment_is_image( $attachment_id ) ) {
			return $metadata;
		}

		$file_path = get_attached_file( $attachment_id );
		if ( ! $file_path || ! is_readable( $file_path ) ) {
			return $metadata;
		}

		/*
		------------------------------------------------------------------
		 * Skip if user already set an alt-text.
		 * ------------------------------------------------------------------
		 */
		$current_alt   = get_post_meta( $attachment_id, '_wp_attachment_image_alt', true );
		$filename_slug = sanitize_title( pathinfo( $file_path, PATHINFO_FILENAME ) );

		if ( '' !== $current_alt && sanitize_title( $current_alt ) !== $filename_slug ) {
			return $metadata; // Respect user-provided alt.
		}

		/*
		------------------------------------------------------------------
		 * 1) Try XMP AltTextAccessibility.
		 * ------------------------------------------------------------------
		 */
		$alt_text = self::extract_xmp_alt_text( $file_path );

		/*
		------------------------------------------------------------------
		 * 2) Fallback: IPTC/ObjectName (Title) already parsed by WP.
		 * ------------------------------------------------------------------
		 */
		if ( '' === $alt_text ) { // Yoda.
			require_once ABSPATH . 'wp-admin/includes/image.php';
			$core = wp_read_image_metadata( $file_path );
			if ( is_array( $core ) && ! empty( $core['title'] ) ) {
				$alt_text = sanitize_text_field( $core['title'] );
			}
		}

		if ( '' !== $alt_text ) { // Yoda.
			update_post_meta( $attachment_id, '_wp_attachment_image_alt', $alt_text );
		}

		return $metadata;
	}

	/*
	* ------------------------------------------------------------------
	* Helpers
	* ------------------------------------------------------------------
	*/

	/**
	 * Extract AltTextAccessibility from embedded XMP packet.
	 *
	 * @param string $file_path Absolute path to image.
	 * @return string Sanitised alt-text or ''.
	 */
	private static function extract_xmp_alt_text( string $file_path ): string {

		// phpcs:ignore WordPress.WP.AlternativeFunctions -- controlled environment.
		$raw = file_get_contents( $file_path, false, null, 0, 262144 ); // 256 KiB.
		if ( false === $raw || ! preg_match( '/<x:xmpmeta[^>]*>.*?<\/x:xmpmeta>/is', $raw, $m ) ) {
			return '';
		}

		$dom = new DOMDocument();
		libxml_use_internal_errors( true );
		if ( ! $dom->loadXML( $m[0], LIBXML_NOBLANKS | LIBXML_NOERROR | LIBXML_NOWARNING ) ) {
			libxml_clear_errors();
			return '';
		}
		libxml_clear_errors();

		$xp = new DOMXPath( $dom );
		$xp->registerNamespace( 'iptc', 'http://iptc.org/std/Iptc4xmpExt/2008-02-29/' );
		$xp->registerNamespace( 'rdf', 'http://www.w3.org/1999/02/22-rdf-syntax-ns#' );

		/* translators: XPath to element  <Iptc4xmpExt:AltTextAccessibility><rdf:Alt><rdf:li>. */
		$nodes = $xp->query( '//*[local-name()="AltTextAccessibility"]//rdf:li' );

		if ( 0 === $nodes->length ) {
			$nodes = $xp->query( '//*[local-name()="AltTextAccessibility" and not(rdf:li)]' );
		}
		if ( 0 === $nodes->length ) {
			$nodes = $xp->query( '//rdf:Description/@*[local-name()="AltTextAccessibility"]' );
		}
		if ( 0 === $nodes->length ) {
			return '';
		}

		return sanitize_text_field( trim( $nodes->item( 0 )->nodeValue ) );
	}
}
